from django.shortcuts import render,get_object_or_404, redirect
from django.contrib.auth.mixins import LoginRequiredMixin
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView, TemplateView
from .filters import PostFilter
from .forms import PostForm
from django.views import View
from .models import Author
from django.http import HttpResponse
from django.conf import settings
LANGUAGE_SESSION_KEY = settings.LANGUAGE_COOKIE_NAME
from django.utils import timezone
import pytz
from django.core.cache import cache
from django.urls import reverse_lazy
from django.contrib.auth.decorators import login_required
from .models import Post, Category
import random
import string
import datetime
from django.contrib.auth import get_user_model
from django.http import JsonResponse
from django.utils.timezone import now
from .models import OneTimeCode, User
from django.contrib.auth import login, get_backends
from django.core.mail import send_mail
from .models import Post, Response
from .forms import ResponseForm
from .models import Subscriber
class PostsList(ListView):
    model = Post
    ordering = '-post_time'
    template_name = 'post_list.html'
    context_object_name = 'posts'
    paginate_by = 10

    def get_queryset(self):
        queryset = super().get_queryset()
        self.filterset = PostFilter(self.request.GET, queryset=queryset)
        return self.filterset.qs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['filterset'] = self.filterset
        return context

    def get_template_names(self):
        if self.request.path == '':
            self.template_name = 'post_list.html'
        elif self.request.path == '/search/':
            self.template_name = 'search.html'
        return self.template_name


class PostsDetail(DetailView):
    model = Post
    template_name = 'post_detail.html'
    context_object_name = 'post'

    def get_object(self, *args, **kwargs):  # –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞, –∫–∞–∫ –Ω–∏ —Å—Ç—Ä–∞–Ω–Ω–æ

        obj = cache.get(f'news-{self.kwargs["pk"]}',None)  # –∫—ç—à –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂ –Ω–∞ —Å–ª–æ–≤–∞—Ä—å, –∏ –º–µ—Ç–æ–¥ get –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–∞–∫ –∂–µ. –û–Ω –∑–∞–±–∏—Ä–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –∑–∞–±–∏—Ä–∞–µ—Ç None.

        # –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ—Ç –≤ –∫—ç—à–µ, —Ç–æ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∫—ç—à

        if not obj:
            obj = super().get_object(queryset=self.queryset)
            cache.set(f'news-{self.kwargs["pk"]}', obj)
        return obj

class PostsSearch(ListView):
    model = Post
    ordering = '-post_time'
    template_name = 'search.html'
    context_object_name = 'posts'
    paginate_by = 10

    def get_queryset(self):
        queryset = super().get_queryset()
        self.filterset = PostFilter(self.request.GET, queryset=queryset)
        return self.filterset.qs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['filterset'] = self.filterset
        return context


class PostsCreate(LoginRequiredMixin, CreateView):
    form_class = PostForm
    model = Post
    template_name = 'post_create.html'
    login_url = '/register/'
    redirect_field_name = 'next'


    def form_valid(self, form):
        user = self.request.user

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç Author, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        author_instance, created = Author.objects.get_or_create(user=user)

        form.instance.author = author_instance
        return super().form_valid(form)

class PostsUpdate(LoginRequiredMixin, UpdateView):
    model = Post
    template_name = 'post_edit.html'
    login_url = '/accounts/login/'
    redirect_field_name = 'next'



class PostsDelete(LoginRequiredMixin, DeleteView):
    model = Post
    template_name = 'post_delete.html'
    success_url = reverse_lazy('post_list')
    login_url = '/register/'
    redirect_field_name = 'next'


class IndexView(LoginRequiredMixin, TemplateView):
    template_name = 'protect/index.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['is_not_premium'] = not self.request.user.groups.filter(name='premium').exists()
        return context


class Index(View):
    def get(self, request):
        curent_time = timezone.now()

        # .  Translators: This message appears on the home page only
        models = Category.objects.all()

        context = {
            'models': models,
            'current_time': timezone.now(),
            'timezones': pytz.common_timezones  # –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞
        }

        return HttpResponse(render(request, 'test_gettext.html', context))

    #  –ø–æ –ø–æ—Å—Ç-–∑–∞–ø—Ä–æ—Å—É –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –≤ —Å–µ—Å—Å–∏—é —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –∫–æ—Ç–æ—Ä—ã–π –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞–º–∏ —Ä–∞–Ω–µ–µ middleware
    def post(self, request):
        request.session['django_timezone'] = request.POST['timezone']
        return redirect('/news/test')


@login_required
def user_responses(request):
    author = Author.objects.get(user=request.user)  # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    responses = Response.objects.filter(post__author=author)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç Author

    post_id = request.GET.get('post')
    if post_id:
        responses = responses.filter(post_id=post_id)

    return render(request, 'responses.html', {'responses': responses})


@login_required
def create_response(request, post_id):
    post = get_object_or_404(Post, id=post_id)

    if request.method == 'POST':
        form = ResponseForm(request.POST)
        if form.is_valid():
            response = form.save(commit=False)
            response.post = post
            response.user = request.user
            response.save()

            # üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –∞–≤—Ç–æ—Ä—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            send_mail(
                '–ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ',
                f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {post.author.user.username}!\n\n'
                f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {request.user.username} –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ "{post.title}".\n\n'
                f'–¢–µ–∫—Å—Ç –æ—Ç–∫–ª–∏–∫–∞:\n"{response.text}"\n\n'
                f'–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–ª–∏–∫–∏ –º–æ–∂–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ.',
                'Shapch1c@yandex.ru',  # –ó–¥–µ—Å—å —É–∫–∞–∂–∏ —Å–≤–æ—é –ø–æ—á—Ç—É-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                [post.author.user.email],  # Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–∞–≤—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è)
                fail_silently=False,
            )

            return redirect('index')  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    else:
        form = ResponseForm()

    return render(request, 'create_response.html', {'form': form, 'post': post})




@login_required
def accept_response(request, response_id):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç–∫–ª–∏–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    response = get_object_or_404(Response, id=response_id, post__author=request.user.author)

    if not response.accepted:
        response.accept()  # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ accept(), –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç email

    return redirect('user_responses')  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–∫–ª–∏–∫–æ–≤

@login_required
def delete_response(request, response_id):
    response = get_object_or_404(Response, id=response_id, post__author=request.user.author)
    response.delete()
    return redirect('user_responses')


def index(request):
    posts = Post.objects.all()
    return render(request, 'index.html', {'posts': posts})







User = get_user_model()

# –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –º–∏–Ω—É—Ç)
CODE_EXPIRATION_MINUTES = 10


def generate_code(length=6):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))


def send_verification_email(email, code):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    send_mail(
        subject="–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
        message=f"–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {code}",
        from_email=None,  # Django –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑—å–º—ë—Ç DEFAULT_FROM_EMAIL
        recipient_list=[email],
        fail_silently=False,
    )

def register_view(request):
    if request.method == "POST":
        email = request.POST.get("email")
        if not email:
            return JsonResponse({"error": "–í–≤–µ–¥–∏—Ç–µ email"}, status=400)

        # –î–æ–±–∞–≤–ª—è–µ–º email –≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        Subscriber.objects.get_or_create(email=email)

        user, created = User.objects.get_or_create(
            email=email,
            defaults={"username": email, "is_active": False}
        )

        code = generate_code()
        OneTimeCode.objects.create(code=code, user=user, created_at=now())

        send_verification_email(email, code)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ —Å–µ—Å—Å–∏–∏
        request.session["email"] = email

        return redirect("verify")  # –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

    return render(request, "register.html")



def verify_email_view(request):
    if request.method == "POST":
        email = request.session.get("email")  # –ë–µ—Ä—ë–º email –∏–∑ —Å–µ—Å—Å–∏–∏
        code = request.POST.get("code")

        if not email:
            return JsonResponse({"error": "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."}, status=400)

        try:
            user = User.objects.get(email=email)
            otp = OneTimeCode.objects.filter(user=user, code=code).first()

            if otp:
                if (now() - otp.created_at).total_seconds() > 600:
                    return JsonResponse({"error": "–ö–æ–¥ –∏—Å—Ç—ë–∫."}, status=400)

                user.is_active = True
                user.save()
                otp.delete()

                # ‚úÖ –£–∫–∞–∑—ã–≤–∞–µ–º backend –ø–µ—Ä–µ–¥ login
                user.backend = get_backends()[0].__module__ + "." + get_backends()[0].__class__.__name__
                login(request, user)

                return redirect("/")

            return JsonResponse({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥."}, status=400)

        except User.DoesNotExist:
            return JsonResponse({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."}, status=400)

    return render(request, "verify.html")  # ‚úÖ return —Ç–µ–ø–µ—Ä—å –≤ –∫–æ–Ω—Ü–µ!



def cleanup_expired_codes():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤."""
    expiration_time = now() - datetime.timedelta(minutes=CODE_EXPIRATION_MINUTES)
    OneTimeCode.objects.filter(created_at__lt=expiration_time).delete()








from django.http import JsonResponse
from .tasks import send_email_to_all_users
from .models import EmailList
def send_mass_email(request):
    emails = list(EmailList.objects.values_list('email', flat=True))  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ email

    valid_emails = [email for email in emails if email]  # –ò—Å–∫–ª—é—á–∞–µ–º –ø—É—Å—Ç—ã–µ email

    if valid_emails:
        for email in valid_emails:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –æ—Ç–¥–µ–ª—å–Ω–æ
            send_email_to_all_users.delay(
                subject="–ü—Ä–∏–≤–µ—Ç –æ—Ç –ê–Ω—Ç–æ–Ω–∞",
                message="–≠—Ç–æ —Ç–µ—Å—Ç celery –≤ –º–æ–µ–º –ø—Ä–æ–µ–∫—Ç–µ",
                recipient=email  # –ü–µ—Ä–µ–¥–∞—ë–º email –≤ –∑–∞–¥–∞—á—É
            )
        return JsonResponse({"status": "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!"})
    else:
        return JsonResponse({"status": "–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö email-–∞–¥—Ä–µ—Å–æ–≤!"})




